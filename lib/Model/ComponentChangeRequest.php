<?php
/**
 * ComponentChangeRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ASMP\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ASMP
 *
 * Application Server Management Protocol server
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@asmp.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ASMP\Client\Model;

use \ArrayAccess;
use \ASMP\Client\ObjectSerializer;

/**
 * ComponentChangeRequest Class Doc Comment
 *
 * @category Class
 * @package  ASMP\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComponentChangeRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ComponentChangeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'constraint_type' => 'string',
'constraint' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'constraint_type' => null,
'constraint' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'constraint_type' => 'constraintType',
'constraint' => 'constraint'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'constraint_type' => 'setConstraintType',
'constraint' => 'setConstraint'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'constraint_type' => 'getConstraintType',
'constraint' => 'getConstraint'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONSTRAINT_TYPE_VERSION = 'VERSION';
const CONSTRAINT_TYPE_RANGE = 'RANGE';
const CONSTRAINT_TYPE_EXACT = 'EXACT';
const CONSTRAINT_TYPE_ONEOF = 'ONEOF';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConstraintTypeAllowableValues()
    {
        return [
            self::CONSTRAINT_TYPE_VERSION,
self::CONSTRAINT_TYPE_RANGE,
self::CONSTRAINT_TYPE_EXACT,
self::CONSTRAINT_TYPE_ONEOF,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['constraint_type'] = isset($data['constraint_type']) ? $data['constraint_type'] : null;
        $this->container['constraint'] = isset($data['constraint']) ? $data['constraint'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getConstraintTypeAllowableValues();
        if (!is_null($this->container['constraint_type']) && !in_array($this->container['constraint_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'constraint_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['constraint'] === null) {
            $invalidProperties[] = "'constraint' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name component name according to reserved component names, see asmp.io
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets constraint_type
     *
     * @return string
     */
    public function getConstraintType()
    {
        return $this->container['constraint_type'];
    }

    /**
     * Sets constraint_type
     *
     * @param string $constraint_type constraint_type
     *
     * @return $this
     */
    public function setConstraintType($constraint_type)
    {
        $allowedValues = $this->getConstraintTypeAllowableValues();
        if (!is_null($constraint_type) && !in_array($constraint_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'constraint_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['constraint_type'] = $constraint_type;

        return $this;
    }

    /**
     * Gets constraint
     *
     * @return object
     */
    public function getConstraint()
    {
        return $this->container['constraint'];
    }

    /**
     * Sets constraint
     *
     * @param object $constraint constraint
     *
     * @return $this
     */
    public function setConstraint($constraint)
    {
        $this->container['constraint'] = $constraint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
